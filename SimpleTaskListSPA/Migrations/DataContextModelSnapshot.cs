// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleTaskListSPA.Data;

namespace SimpleTaskListSPA.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SimpleTaskListSPA.Data.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SimpleTaskListSPA.Data.TaskItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<DateTime?>("EffectiveDate");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsImportant");

                    b.Property<bool>("IsOverdue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql(@"
	                CAST(CASE
		                WHEN CONVERT(date, PlanningDate) < CONVERT(date, GETDATE()) THEN 1
		                WHEN PlanningDate IS NULL THEN 0
		                WHEN CONVERT(date, PlanningDate) >= CONVERT(date, GETDATE()) THEN 0
	                END AS BIT)");

                    b.Property<bool>("IsPlanningDateUsed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<DateTime?>("PlanningDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SimpleTaskListSPA.Data.TaskItem", b =>
                {
                    b.HasOne("SimpleTaskListSPA.Data.Category", "Category")
                        .WithMany("TaskItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
